/*
 * Team : AGF AM / OSI / SI / BO
 *
 * Copyright (c) 2001 AGF Asset Management.
 */
package net.codjo.aspect.util;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
/**
 * DOCUMENT ME!
 *
 * @version $Revision: 1.1 $
 */
public class MockStatement implements Statement {
    private StringBuffer executeList;


    public MockStatement(StringBuffer buf) {
        this.executeList = buf;
    }


    public ResultSet executeQuery(String s) throws SQLException {
        append(" execute query {" + s + "} ");
        return new MockResultSet(this.executeList);
    }


    public int executeUpdate(String s) throws SQLException {
        append(" execute update {" + s + "} ");
        return 0;
    }


    public void close() throws SQLException {
        append(" close ");
    }


    public int getMaxFieldSize() throws SQLException {
        return 0;
    }


    public void setMaxFieldSize(int i) throws SQLException {
    }


    public int getMaxRows() throws SQLException {
        return 0;
    }


    public void setMaxRows(int i) throws SQLException {
    }


    public void setEscapeProcessing(boolean b) throws SQLException {
    }


    public int getQueryTimeout() throws SQLException {
        return 0;
    }


    public void setQueryTimeout(int i) throws SQLException {
    }


    public void cancel() throws SQLException {
    }


    public SQLWarning getWarnings() throws SQLException {
        return null;
    }


    public void clearWarnings() throws SQLException {
    }


    public void setCursorName(String s) throws SQLException {
    }


    public boolean execute(String s) throws SQLException {
        return false;
    }


    public ResultSet getResultSet() throws SQLException {
        return new MockResultSet(this.executeList);
    }


    public int getUpdateCount() throws SQLException {
        return 0;
    }


    public boolean getMoreResults() throws SQLException {
        return false;
    }


    public void setFetchDirection(int i) throws SQLException {
    }


    public int getFetchDirection() throws SQLException {
        return 0;
    }


    public void setFetchSize(int i) throws SQLException {
    }


    public int getFetchSize() throws SQLException {
        return 0;
    }


    public int getResultSetConcurrency() throws SQLException {
        return 0;
    }


    public int getResultSetType() throws SQLException {
        return 0;
    }


    public void addBatch(String s) throws SQLException {
    }


    public void clearBatch() throws SQLException {
    }


    public int[] executeBatch() throws SQLException {
        return new int[0];
    }


    public Connection getConnection() throws SQLException {
        return null;
    }


    public boolean getMoreResults(int current) throws SQLException {
        return false;  // Todo
    }


    public ResultSet getGeneratedKeys() throws SQLException {
        return null;  // Todo
    }


    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return 0;  // Todo
    }


    public int executeUpdate(String sql, int columnIndexes[]) throws SQLException {
        return 0;  // Todo
    }


    public int executeUpdate(String sql, String columnNames[]) throws SQLException {
        return 0;  // Todo
    }


    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return false;  // Todo
    }


    public boolean execute(String sql, int columnIndexes[]) throws SQLException {
        return false;  // Todo
    }


    public boolean execute(String sql, String columnNames[]) throws SQLException {
        return false;  // Todo
    }


    public int getResultSetHoldability() throws SQLException {
        return 0;  // Todo
    }


    private void append(String str) {
        if (executeList.length() > 0) {
            executeList.append(", ");
        }
        executeList.append(" ST ").append(str);
    }
}
